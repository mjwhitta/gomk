#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <bin1>... [binN]

DESCRIPTION
    Strip metadata from binary.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("awk")
deps+=("grep")
deps+=("head")
deps+=("sed")
deps+=("sort")
deps+=("strings")
deps+=("tr")
deps+=("xxd")
check_deps

# Check for valid params
[[ $# -gt 0 ]] || usage 1

script="/tmp/strip_$(head -c 8 /dev/urandom | xxd -p)"

for bin in "$@"; do
    # Build sed script
    echo -n >"$script"
    while read -r line; do
        new="$(echo "${line#* }" | tr "[:print:]" " ")"
        echo "s#${line#* }#$new#gi" >>"$script"
    done < <(
        strings "$bin" | sort -u | grep -ioPs "git(hub|lab)\S+" | \
        awk '{print length(),$0 | "sort -nr"}'
    ); unset line

    sed -i "s/\*/\\\\*/g" "$script"
    sed -f "$script" -i "$bin"
    rm -f "$script"
done; unset bin
